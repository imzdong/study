plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'org.imzdong'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {

	// 依赖lib目录下的所有以.jar结尾的文件
	implementation fileTree(dir: 'lib', includes: ['*.jar'])

	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'com.itextpdf:html2pdf:4.0.2'
	implementation 'com.bit-scout:pdf-converter:1.0.2'
	// https://mvnrepository.com/artifact/com.google.guava/guava
	implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
	implementation 'org.apache.tika:tika-core:2.7.0'
	implementation 'org.apache.tika:tika-parsers-standard-package:2.7.0'
	// https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox
	implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.27'
	// https://mvnrepository.com/artifact/net.sf.cssbox/pdf2dom
	implementation 'net.sf.cssbox:pdf2dom:2.0.3'
	// https://mvnrepository.com/artifact/org.apache.tika/tika-langdetect-optimaize
	implementation 'org.apache.tika:tika-langdetect-optimaize:2.7.0'
	// https://mvnrepository.com/artifact/io.netty/netty-all
	implementation 'io.netty:netty-all:4.1.89.Final'
	// https://mvnrepository.com/artifact/com.alibaba/fastjson
	implementation 'com.alibaba:fastjson:2.0.23'
	/** Solving lombok */
	compileOnly("org.projectlombok:lombok")
	testCompileOnly("org.projectlombok:lombok")
	annotationProcessor "org.projectlombok:lombok"
	testAnnotationProcessor "org.projectlombok:lombok"
	// https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
	implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
	// https://mvnrepository.com/artifact/org.freemarker/freemarker
	implementation 'org.freemarker:freemarker:2.3.32'
// https://mvnrepository.com/artifact/org.apache.httpcomponents.client5/httpclient5
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
// https://mvnrepository.com/artifact/net.sourceforge.htmlunit/htmlunit
	implementation 'net.sourceforge.htmlunit:htmlunit:2.70.0'
// https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
	implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.11'

	implementation 'com.squareup.retrofit2:retrofit:2.9.0'
	implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
	implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'

	/**
	 *
	 在 Gradle 中，dependencies 可以包含多个依赖项（dependencies），这些依赖项可以通过不同的声明方式进行添加。常用的类型包括：
	 implementation：指定编译时依赖，这些依赖只在编译和运行时需要，不会传递到依赖模块中。
	 api：指定编译时依赖，这些依赖会传递到依赖模块中，并在公共 API 中可见。如果依赖模块中有许多依赖需要暴露给使用者，建议使用此选项。
	 compileOnly：指定编译时依赖，这些依赖只在编译时需要，而不会被传递到运行时。
	 runtimeOnly：指定运行时依赖，这些依赖只在运行时需要，而不会被传递到编译时。
	 testImplementation：指定测试时依赖，这些依赖只在测试代码中需要，不会传递到依赖模块中。
	 testRuntimeOnly：指定测试运行时依赖，这些依赖只在测试运行时需要，不会传递到编译时和其他运行时。
	 classpath：指定构建脚本的依赖，例如构建插件或自定义 Gradle 任务所需的类。
	 在 Gradle 5.0 及更高版本中，api 和 implementation 可以用来代替 compile 和 provided，而在 4.0 以下的版本中，则只能使用 compile 和 provided。
	 */

}

tasks.named('test') {
	useJUnitPlatform()
}
