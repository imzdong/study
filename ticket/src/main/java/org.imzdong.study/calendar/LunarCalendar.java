package org.imzdong.study.calendar;

import org.apache.commons.lang3.StringUtils;

import java.util.*;

/**
 * @description:
 * @author: Winter
 * @time: 2020年1月2日, 0002 16:47
 */
public class LunarCalendar {

    public static void main(String[] args) {
        int a = 100;
        int b = -a;
        System.out.println(b);
        //Gregorian2Lunar("2012-1-3");
        //Lunar2Gregorian("2013-4-10")
        //GetLunarString(2013, 5, 26, False)
        //Get24LunarFeast((2013,5,4))
        String zi = get8Zi(2020, 1, 2, 0, 0);
        System.out.println(zi);
    }

    private static String get8Zi(int nGreYear,int nGreMonth,int nGreDay,
                               int nHour,int nMinute){
        Map<String, Object> lunar2Map = gregorian2Lunar(nGreYear, nGreMonth, nGreDay);
        Integer nLunYear = (Integer) lunar2Map.get("wLunarYear");
        Integer nLunMonth = (Integer) lunar2Map.get("wLunarMonth");
        Integer nLunDay = (Integer) lunar2Map.get("wLunarDay");
        Boolean bEmbolism = (Boolean) lunar2Map.get("embolism");
        /**
         * lunar2.put("wLunarYear",wLunarYear);
         *         lunar2.put("wLunarMonth",wLunarMonth);
         *         lunar2.put("wLunarDay",wLunarDay);
         *         lunar2.put("embolism",embolism);
         */
        Map<String, String> lunarString = getLunarString(nLunYear, nLunMonth, nLunDay, bEmbolism);
        String sShuxiang = lunarString.get("sShuxiang");
        String sTianGan = lunarString.get("sTianGan");
        String sDiZhi = lunarString.get("sDiZhi");
        String sNongliMonth = lunarString.get("sNongliMonth");
        String sNongliDay = lunarString.get("sNongliDay");
        int nTianGan=((nGreYear-4)%60)%10;
        //时辰
        int nShiCheng=nHour/2;
        if(nHour%2==1) {//[a<=x<b)半开半闭
            nShiCheng += 1;
        }
        if(nShiCheng==12) {
            nShiCheng = 0;
        }
        //分钟
        int nFeng=nMinute/10;
        if(nHour%2==0) {
            nFeng += 6;//1 '分' 含120分钟
        }
        //年干支
        String str_Year=sTianGan+sDiZhi;
        //月干支
        String[][] cListMonth= {
                //甲己	 乙庚	     丙辛     丁壬	     戊癸
                {"丙寅", "戊寅", "庚寅", "壬寅", "甲寅"},
                { "丁卯",  "己卯",  "辛卯",  "癸卯",  "乙卯"},
                { "戊辰",  "庚辰",  "壬辰",  "甲辰",  "丙辰"},
                { "己巳",  "辛巳",  "癸巳",  "乙巳",  "丁巳"},
                { "庚午",  "壬午",  "甲午",  "丙午",  "戊午"},
                { "辛未",  "癸未",  "乙未",  "丁未",  "己未"},
                { "壬申",  "甲申",  "丙申",  "戊申",  "庚申"},
                { "癸酉",  "乙酉",  "丁酉",  "己酉",  "辛酉"},
                { "甲戌",  "丙戌",  "戊戌",  "庚戌",  "壬戌"},
                { "乙亥",  "丁亥",  "己亥",  "辛亥",  "癸亥"},
                { "丙子",  "戊子",  "庚子",  "壬子",  "甲子"},
                { "丁丑",  "己丑",  "辛丑",  "癸丑",  "乙丑"}
        };
        //天干名称
        String[] cTianGan = {"甲","乙","丙","丁","戊","己","庚","辛","壬","癸"};
        //地支名称
        String[] cDizhi={"子","丑","寅","卯","辰","巳","午","未","申","酉","戌","亥"};
        Map<String, Object> lunarFeast = get24LunarFeast(nGreYear, nGreMonth, nGreDay);
        String sFeast = (String) lunarFeast.get("sFeast");
        Integer nFeastMonth = (Integer) lunarFeast.get("nFeastMonth");
        //sFeast,nFeastMonth
        int nMonth=nFeastMonth; //二十四节气定年月支
        if(nGreMonth==12) {
            if(nFeastMonth == 13) {
                nMonth = 1;
                //for nTG in range(0, 10):
                for(int nTG=0;nTG<10;nTG++) {
                    if(sTianGan.equals(cTianGan[nTG])) {
                        sTianGan = cTianGan[(nTG - 1) % 10];
                        break;
                    }
                }
                //for nDZ in range(0, 12):
                for(int nDZ=0;nDZ<12;nDZ++) {
                    if(sDiZhi.equals(cDizhi[nDZ])){
                        sDiZhi = cDizhi[(nDZ - 1) % 12];
                        break;
                    }
                }
            }
            if(nFeastMonth == 13) {
                nMonth = 1;
            }
        }

        if(nTianGan>=5) {
            nTianGan -= 5;
        }
        String str_Month=cListMonth[nMonth-1][nTianGan];
        //日干支
        //1.求元旦干支 以阳历日期来求
        int nGongYuanYear=nGreYear%100;//公元纪年的最后两位
        if(nGongYuanYear==0) {
            nGongYuanYear = 100;//百年逢百
        }
        int nA=(nGongYuanYear%12)*5;
        int nB=nGongYuanYear/4;
        if(nGongYuanYear%4!=0){
            nB = nB + 1;
        }
        int nYuanDanGanZHi=nA+nB;
        //2.查表 以cListMonth排列
        //1901～2000年间以甲戌作1向后推某年C的值，既是该年元旦的干支﹙2001～2100年间以己未作1﹚
        int nGongYuan=nGreYear;
        int nX=(nYuanDanGanZHi/12)%5;
        int nY=nYuanDanGanZHi%12;
        if(nGongYuan>2000) {
            nX = (nX + 4) % 5;
            if(nY + 5 > 12){
                nX = (nX + 1) % 5;
            }
            nY = (nY + 4) % 12;
        }
        if(nGongYuan<=2000) {
            if(nY + 8 > 12){
                nX = (nX + 1) % 5;
            }
            nY = (nY + 7) % 12;
        }
        String str_YuanDanDay=cListMonth[nY][nX];
        //3.求当日干支
        int nDayGan=0,nDayZhi=0;
        //for n in range(0,10):
        for(int n=0;n<10;n++) {
            if(str_YuanDanDay.substring(0,1).equals(cTianGan[n])){//C源码中文为两个字节，Python为一个
                nDayGan = n;
                break;
            }
        }
        //for k in range(0,12):
        for(int k=0;k<10;k++) {
            if(str_YuanDanDay.substring(1).equals(cDizhi[k])){
                nDayZhi = k;
                break;
            }
        }
        /*#诗诀
        # 一月干支均减１    二月干加０支加６   三月干减二支加10
        # 四月干减１支加５  五月干支均减１     六月干加０支加６
        # 七月干支均加０    八月干加１支加７   九月干支均加２ 　
        # 十月干加２支加８  十一月干支均加３ 　十二月干加３支加９*/
        int nGanRun=0,nZhiRun=0;
        if (nGreMonth == 1) {
            nGanRun = nGanRun - 1;
            nZhiRun = nZhiRun - 1;
        } else if (nGreMonth == 2) {
            nZhiRun = nZhiRun + 6;
        } else if (nGreMonth == 3) {
            nGanRun = nGanRun - 2;
            nZhiRun = nZhiRun + 10;
        } else if (nGreMonth == 4) {
            nGanRun = nGanRun - 1;
            nZhiRun = nZhiRun + 5;
        } else if (nGreMonth == 5) {
            nGanRun = nGanRun - 1;
            nZhiRun = nZhiRun - 1;
        } else if (nGreMonth == 6) {
            nZhiRun += 6;
        } else if (nGreMonth == 8) {
            nGanRun += 1;
            nZhiRun += 7;
        } else if (nGreMonth == 9) {
            nGanRun += 2;
            nZhiRun += 2;
        } else if (nGreMonth == 10) {
            nGanRun += 2;
            nZhiRun += 8;
        } else if (nGreMonth == 11) {
            nGanRun += 3;
            nZhiRun += 3;
        } else if (nGreMonth == 12) {
            nGanRun += 3;
            nZhiRun += 9;
        }
        int nRunYear=0;
        //四年一闰,百年不闰,四百年再闰
        if( (nGreYear%400==0) || ((nGreYear%100!=0) && (nGreYear%4==0))){
            if(nGreMonth > 2) {
                nRunYear += 1;
            }
        }
        //(nDayGan）+（nDay）+（所求月的天干加减数、闰年三月以后减1）÷10
        int nTodayGan=(nDayGan+nGreDay+nGanRun+nRunYear)%10;
        //（所求年份的元旦地支）+（所求日期）+（所求月的地支加减数、闰年三月以后减1）÷12
        int nTodayZhi=(nDayZhi+nGreDay+nZhiRun+nRunYear)%12;
        String str_TodayGan=cTianGan[nTodayGan];
        String str_TodayZhi=cDizhi[nTodayZhi];
        String str_Day=str_TodayGan+str_TodayZhi;
        //时干支
        String[][] cListTime={
                //甲己	     乙庚	 丙辛      丁壬	  戊癸
                {"甲子","丙子","戊子","庚子","壬子"},
                {"乙丑","丁丑","己丑","辛丑","癸丑"},
                {"丙寅","戊寅","庚寅","壬寅","甲寅"},
                {"丁卯","己卯","辛卯","癸卯","乙卯"},
                {"戊辰","庚辰","壬辰","甲辰","丙辰"},
                {"己巳","辛巳","癸巳","乙巳","丁巳"},
                {"庚午","壬午","甲午","丙午","戊午"},
                {"辛未","癸未","乙未","丁未","己未"},
                {"壬申","甲申","丙申","戊申","庚申"},
                {"癸酉","乙酉","丁酉","己酉","辛酉"},
                {"甲戌","丙戌","戊戌","庚戌","壬戌"},
                {"乙亥","丁亥","己亥","辛亥","癸亥"}
        };
        String str_Time=cListTime[nShiCheng][nTodayGan%5];
        //考刻分 时上起刻
        int nTimeGan=0;
        //for j in range(0,10):
        for (int j = 0; j < 10; j++) {
            if (str_Time.substring(0, 1).equals(cTianGan[j])) {
                nTimeGan = j;
                break;
            }
        }
        String str_Minute=cListTime[nFeng][nTimeGan%5];
        //四柱 + 考时   十字
        return str_Year+":"+str_Month+":"+str_Day+":"+str_Time+":"+str_Minute;
    }

    private static Map<String,Object> get24LunarFeast(int nGreYear,int nGreMonth,int nGreDay){
        String[] HolText={"小寒","大寒","立春","雨水",
                "惊蛰","春分","清明","谷雨",
                "立夏","小满","芒种","夏至",
                "小暑","大暑","立秋","处暑",
                "白露","秋分","寒露","霜降",
                "立冬","小雪","大雪","冬至",""};
        int holiIndex = getLunarFeastIndex(nGreYear, nGreMonth, nGreDay);
        String sFeast,str_Hol;
        if(holiIndex > 0) {
            sFeast = HolText[holiIndex - 1];
        }else {
            sFeast = "";
        }
        int nFeastMonth=0;
        //for n in range(1,31):
        int n=1;
        while (n<31) {
            str_Hol = HolText[getLunarFeastIndex(nGreYear, nGreMonth, n) - 1];
            if(StringUtils.isNotBlank(str_Hol)) {
                if(str_Hol.equals("立春")) {
                    if(nGreDay >= n){
                        nFeastMonth = 13;//当天在立春后
                    }else{
                        nFeastMonth = 14;                   //当天在立春前
                    }
                    break;
                }
                if (str_Hol.equals("惊蛰")) {
                    if (nGreDay >= n) {
                        nFeastMonth = 2;
                    } else {
                        nFeastMonth = 1;                //当天在惊蛰前（下同）
                    }
                    break;
                }
                if (str_Hol.equals("清明")) {
                    if (nGreDay >= n) {
                        nFeastMonth = 3;
                    } else {
                        nFeastMonth = 2;
                    }
                    break;
                }
                if (str_Hol.equals("立夏")) {
                    if (nGreDay >= n) {
                        nFeastMonth = 4;
                    } else {
                        nFeastMonth = 3;
                    }
                    break;
                }
                if (str_Hol.equals("芒种")) {
                    if (nGreDay >= n) {
                        nFeastMonth = 5;
                    } else {
                        nFeastMonth = 4;
                    }
                    break;
                }
                if (str_Hol.equals("小暑")) {
                    if (nGreDay >= n) {
                        nFeastMonth = 6;
                    } else {
                        nFeastMonth = 5;
                    }
                    break;
                }
                if (str_Hol.equals("立秋")) {
                    if (nGreDay >= n) {
                        nFeastMonth = 7;
                    } else {
                        nFeastMonth = 6;
                    }
                    break;
                }
                if (str_Hol.equals("白露")) {
                    if (nGreDay >= n) {
                        nFeastMonth = 8;
                    } else {
                        nFeastMonth = 7;
                    }
                    break;
                }
                if (str_Hol.equals("寒露")) {
                    if (nGreDay >= n) {
                        nFeastMonth = 9;
                    } else {
                        nFeastMonth = 8;
                    }
                    break;
                }
                if (str_Hol.equals("立冬")) {
                    if (nGreDay >= n) {
                        nFeastMonth = 10;
                    } else {
                        nFeastMonth = 9;
                    }
                    break;
                }
                if (str_Hol.equals("大雪")) {
                    if (nGreDay >= n) {
                        nFeastMonth = 11;
                    } else {
                        nFeastMonth = 10;
                    }
                    break;
                }
                if (str_Hol.equals("小寒")) {
                    if (nGreDay >= n) {
                        nFeastMonth = 12;
                    } else {
                        nFeastMonth = 11;
                    }
                    break;
                }
            }
        }
        Map<String,Object> result = new HashMap<>();
        result.put("sFeast",sFeast);
        result.put("nFeastMonth",nFeastMonth);
        return result;
    }

    private static int getLunarFeastIndex(int nGreYear,int nGreMonth,int nGreDay){
        /*#数组gLanarHoliDay存放每年的二十四节气对应的阳历日期
        #每年的二十四节气对应的阳历日期几乎固定，平均分布于十二个月中
        # 1月 2月 3月 4月 5月 6月
        #小寒 大寒 立春 雨水 惊蛰 春分 清明 谷雨 立夏 小满 芒种 夏至
        # 7月 8月 9月 10月 11月 12月
        #小暑 大暑 立秋 处暑 白露 秋分 寒露 霜降 立冬 小雪 大雪 冬至
        #**********************************
        # 节气无任何确定规律,所以只好存表,要节省空间,所以....
        #**********************************}
        #数据格式说明:
        #如1901年的节气为
        # 1月 2月 3月 4月 5月 6月 7月 8月 9月 10月 11月 12月
        # 6, 21, 4, 19, 6, 21, 5, 21, 6,22, 6,22, 8, 23, 8, 24, 8, 24, 8, 24, 8, 23, 8, 22
        # 9, 6, 11,4, 9, 6, 10,6, 9,7, 9,7, 7, 8, 7, 9, 7, 9, 7, 9, 7, 8, 7, 15
        #上面第一行数据为每月节气对应日期,15减去每月第一个节气,每月第二个节气减去15得第二行
        # 这样每月两个节气对应数据都小于16,每月用一个字节存放,高位存放第一个节气数据,低位存放
        #第二个节气的数据,可得下表*/
        int[] gLunarHolDay={
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1901
        0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1902
        0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78, //1903
        0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87, //1904
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1905
        0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1906
        0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78, //1907
        0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1908
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1909
        0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1910
        0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78, //1911
        0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1912
        0x95, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1913
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1914
        0x96, 0xA5, 0x97, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78, //1915
        0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1916
        0x95, 0xB4, 0x96, 0xA6, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87, //1917
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x77, //1918
        0x96, 0xA5, 0x97, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78, //1919
        0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1920
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87, //1921
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x77, //1922
        0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78, //1923
        0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1924
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87, //1925
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1926
        0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1927
        0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1928
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1929
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1930
        0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1931
        0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1932
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1933
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1934
        0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1935
        0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1936
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1937
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1938
        0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1939
        0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1940
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1941
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1942
        0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1943
        0x96, 0xA5, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1944
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1945
        0x95, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, //1946
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1947
        0x96, 0xA5, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //1948
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x79, 0x78, 0x79, 0x77, 0x87, //1949
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, //1950
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1951
        0x96, 0xA5, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //1952
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1953
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x68, 0x78, 0x87, //1954
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1955
        0x96, 0xA5, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //1956
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1957
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1958
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1959
        0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1960
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1961
        0x96, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1962
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1963
        0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1964
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1965
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1966
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1967
        0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1968
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1969
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1970
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1971
        0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1972
        0xA5, 0xB5, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1973
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1974
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, //1975
        0x96, 0xA4, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x89, 0x88, 0x78, 0x87, 0x87, //1976
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //1977
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87, //1978
        0x96, 0xB4, 0x96, 0xA6, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, //1979
        0x96, 0xA4, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1980
        0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x77, 0x87, //1981
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1982
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, //1983
        0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, //1984
        0xA5, 0xB4, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //1985
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1986
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x79, 0x78, 0x69, 0x78, 0x87, //1987
        0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //1988
        0xA5, 0xB4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1989
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1990
        0x95, 0xB4, 0x96, 0xA5, 0x86, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1991
        0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //1992
        0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1993
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1994
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x76, 0x78, 0x69, 0x78, 0x87, //1995
        0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //1996
        0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1997
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1998
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1999
        0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //2000
        0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2001
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //2002
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //2003
        0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //2004
        0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2005
        0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2006
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //2007
        0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, //2008
        0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2009
        0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2010
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87, //2011
        0x96, 0xB4, 0xA5, 0xB5, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, //2012
        0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, //2013
        0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2014
        0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //2015
        0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, //2016
        0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, //2017
        0xA5, 0xB4, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2018
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //2019
        0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86, //2020
        0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //2021
        0xA5, 0xB4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2022
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //2023
        0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, //2024
        0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //2025
        0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2026
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //2027
        0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, //2028
        0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //2029
        0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2030
        0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //2031
        0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, //2032
        0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x86, //2033
        0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x78, 0x88, 0x78, 0x87, 0x87, //2034
        0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2035
        0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, //2036
        0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //2037
        0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2038
        0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2039
        0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, //2040
        0xA5, 0xC3, 0xA5, 0xB5, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, //2041
        0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2042
        0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2043
        0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x88, 0x87, 0x96, //2044
        0xA5, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, //2045
        0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, //2046
        0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2047
        0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA5, 0x97, 0x87, 0x87, 0x88, 0x86, 0x96, //2048
        0xA4, 0xC3, 0xA5, 0xA5, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86, //2049
        0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x78, 0x78, 0x87, 0x87}; //2050
        int flag=gLunarHolDay[(nGreYear-1901)*12+nGreMonth-1];
        int n,iday;
        if(nGreDay<15){
            iday=15-((flag>>4)&0x0f);
            n=0;
        }else{
            iday=((flag)&0x0f)+15;
            n=1;
        }
        if(iday==nGreDay){
            return(nGreMonth-1)*2+n+1;
        }
        return 25;
    }

    /**
     * 获取农历数据
     * @param nLunYear
     * @param nLunMonth
     * @param nLunDay
     * @param bEmbolism
     * @return
     */
    private static Map<String, String> getLunarString(int nLunYear,int nLunMonth,
                                                      int nLunDay,boolean bEmbolism){
        Map<String,String> lunarStr = new HashMap<>();
        //return lunarStr;
        //天干名称
        String[] cTianGan={"甲","乙","丙","丁","戊","己","庚","辛","壬","癸"};
        //地支名称
        String[] cDizhi={"子","丑","寅","卯","辰","巳","午","未","申","酉","戌","亥"};
        //属相名称
        String[] cShuxiang={"鼠","牛","虎","兔","龙","蛇","马","羊","猴","鸡","狗","猪"};
        //农历日期名
        String[] cDayName={"*","初一","初二","初三","初四","初五",
                "初六","初七","初八","初九","初十",
                "十一","十二","十三","十四","十五",
                "十六","十七","十八","十九","二十",
                "廿一","廿二","廿三","廿四","廿五",
                "廿六","廿七","廿八","廿九","三十"};
        //农历月份名
        String[] cMonName={"*","正","二","三","四","五","六", "七","八","九","十","十一","腊"};
        //生成属相
        int nShuXiang=((nLunYear-4)%60)%12;
        if(nShuXiang<0 || nShuXiang>=cShuxiang.length) {
            throw new RuntimeException("Error Year for Shuxiang");
        }
        String sShuxiang=cShuxiang[nShuXiang];
        //生成农历天干
        int nTianGan=((nLunYear-4)%60)%10;
        if(nTianGan<0 || nTianGan>=cTianGan.length){
            throw new RuntimeException("Error Year for TianGan");
        }
        String sTianGan=cTianGan[nTianGan];
        //生成地支
        int nDiZhi=((nLunYear-4)%60)%12;
        if(nDiZhi<0 || nDiZhi>=cDizhi.length){
            throw new RuntimeException("Error Year for Dizhi");
        }
        String sDiZhi=cDizhi[nDiZhi];
        //生成农历月
        if(nLunMonth<0 || nLunMonth>=cMonName.length) {
            throw new RuntimeException("Error Month for LunMonth");
        }
        String sNongliMonth=cMonName[nLunMonth]+"月";
        if(bEmbolism) {
            sNongliMonth = "闰" + sNongliMonth;
        }
        //生成农历日
        if(nLunDay<0 || nLunDay>=cDayName.length){
            throw new RuntimeException("Error Month for LunDay");
        }
        String sNongliDay=cDayName[nLunDay];
        lunarStr.put("sShuxiang",sShuxiang);
        lunarStr.put("sTianGan",sTianGan);
        lunarStr.put("sDiZhi",sDiZhi);
        lunarStr.put("sNongliMonth",sNongliMonth);
        lunarStr.put("sNongliDay",sNongliDay);
        return lunarStr;
    }
    //公历转农历
    private static Map<String,Object> gregorian2Lunar(int wCurYear, int wCurMonth, int wCurDay){
        Map<String,Object> lunar2 = new HashMap<>();
        //公历每月前面的天数
        int[] wMonthAdd = {0,31,59,90,120,151,181,212,243,273,304,334};
        //农历数据
        int[] wNongliData={1198,2647,330317,3366,3477,265557,1386,2477,18781,1198
		,398491,2637,3365,334501,2900,3434,133485,2395,461111,1175
		,2635,333387,1701,1748,267701,694,2391,133423,1175,396438
		,3402,3749,331177,1453,694,201326,2350,465197,3221,3402
		,400202,2901,1386,267611,605,2349,137515,2709,464533,1738
		,2901,330421,1242,2651,199255,1323,529706,3733,1706,398762
		,2741,1206,267438,2647,1318,204070,3477,461653,1386,2413
		,330077,1197,2637,268877,3365,531109,2900,2922,398042,2395
		,1179,267415,2635,661067,1701,1748,398772,2742,2391,330031
		,1175,1611,200010,3749,527717,1452,2742,332397,2350,3222
		,268949,3402,3493,133973,1386,464219,605,2349,334123,2709
		,2890,267946,2773,592565,1210,2651,395863,1323,2707,265877
		,1706,2773,18869,1206,51799,2638,3366,44691,3411,1450
		,26293,2413,92509,1197,2637,55883,3365,3410,44458,2906
		,1389,18779,1179,62615,2635,2725,46757,1746,2778,27319};
        //取当前公历年、月、日
        //year,month,day = GregorianDate.split('-')
        //wCurYear,wCurMonth,wCurDay=int(year),int(month),int(day)
        int wLunarYear,wLunarMonth,wLunarDay;
        //计算到初始时间1901年2月19日的天数：1921-2-19(正月初一)
        int nTheDate = (wCurYear - 1901) * 365 + (wCurYear - 1901) / 4 + wCurDay + wMonthAdd[wCurMonth - 1] - 38-11;
        if(nTheDate<=0) {
            return null;
        }
        //闰年
        if (wCurYear%4 == 0 && wCurMonth>2) {
            nTheDate = nTheDate + 1;
        }
        //计算农历天干、地支、月、日
        boolean nIsEnd = false;
        int m=0,k=0,n=0,nBit;
        while(!nIsEnd) {
            if(wNongliData[m] < 4095) {
                k = 11;
            }else {
                k = 12;
            }
            n = k;
            while(n >= 0) {
                nBit = wNongliData[m];
                //for i in range(1, n + 1, 1):
                for(int x=1;x<n+1;x++) {
                    nBit = nBit / 2;
                }
                nBit = nBit % 2;
                if(nTheDate <= (29 + nBit)) {
                    nIsEnd = true;
                    break;
                }
                nTheDate = nTheDate - 29 - nBit;
                n = n - 1;
            }
            if(nIsEnd) {
                break;
            }
            m = m + 1;
        }
        wCurYear=1901+m;
        wCurMonth=k-n+1;
        wCurDay=nTheDate;
        if(wCurDay<0) {
            return null;
        }
        if(k==12) {
            if(wCurMonth == wNongliData[m] / 65536 + 1) {
                wCurMonth = 1 - wCurMonth;
            }else if(wCurMonth>wNongliData[m] / 65536 + 1) {
                wCurMonth = wCurMonth - 1;
            }
        }
        wLunarYear=wCurYear;
        boolean embolism;//闰月
        if(wCurMonth<1) {
            wLunarMonth = -wCurMonth;
            embolism = true;
        }else {
            wLunarMonth = wCurMonth;
            embolism = false;
        }
        wLunarDay=wCurDay;
        lunar2.put("wLunarYear",wLunarYear);
        lunar2.put("wLunarMonth",wLunarMonth);
        lunar2.put("wLunarDay",wLunarDay);
        lunar2.put("embolism",embolism);
        return lunar2;
    }
}
