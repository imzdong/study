{
  "error": [],
  "extra": [],
  "data": {
    "list": [
      {
        "had_liked": false,
        "id": 321021,
        "user_name": "Geek_b6da5d",
        "can_delete": false,
        "product_type": "c1",
        "uid": 2840222,
        "ip_address": "",
        "ucode": "5DD79D2367ADA4",
        "user_header": "",
        "comment_is_top": false,
        "comment_ctime": 1636623179,
        "is_pvip": true,
        "discussion_count": 2,
        "race_medal": 0,
        "score": "100420870987",
        "product_id": 100093501,
        "comment_content": "goland其实能够看出变量的作用域 颜色上是不一样的 ",
        "like_count": 24
      },
      {
        "had_liked": false,
        "id": 320186,
        "user_name": "lesserror",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1351076,
        "ip_address": "",
        "ucode": "25A54D1165FCF6",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/14\/9d\/a4\/e481ae48.jpg",
        "comment_is_top": false,
        "comment_ctime": 1636111970,
        "is_pvip": false,
        "replies": [
          {
            "id": "116272",
            "content": "👍",
            "user_name": "作者回复",
            "user_name_real": "Tony Bai",
            "uid": "1026224",
            "ctime": 1636427036,
            "ip_address": "",
            "comment_id": 320186,
            "utype": 1
          }
        ],
        "discussion_count": 7,
        "race_medal": 0,
        "score": "35995850338",
        "product_id": 100093501,
        "comment_content": "关于这一块儿的知识其实还挺绕的。<br><br>不同代码块中的重名变量与变量重声明中的变量区别到底在哪儿？为了方便描述，我就把不同代码块中的重名变量叫做“可重名变量”吧。注意，在同一个代码块中不允许出现重名的变量，这违背了 Go 语言的语法。关于这两者的表象和机理，我们已经讨论得足够充分了。你现在可以说出几条区别？请想一想，然后再看下面的列表。<br><br>1. 变量重声明中的变量一定是在某一个代码块内的。注意，这里的“某一个代码块内”并不包含它的任何子代码块，否则就变成了“多个代码块之间”。而可重名变量指的正是在多个代码块之间由相同的标识符代表的变量。<br><br>2. 变量重声明是对同一个变量的多次声明，这里的变量只有一个。而可重名变量中涉及的变量肯定是有多个的。<br><br>3. 不论对变量重声明多少次，其类型必须始终一致，具体遵从它第一次被声明时给定的类型。而可重名变量之间不存在类似的限制，它们的类型可以是任意的。<br><br>4. 如果可重名变量所在的代码块之间，存在直接或间接的嵌套关系，那么它们之间一定会存在“屏蔽”的现象。但是这种现象绝对不会在变量重声明的场景下出现。",
        "like_count": 8
      },
      {
        "had_liked": false,
        "id": 324443,
        "user_name": "扣剑书生",
        "can_delete": false,
        "product_type": "c1",
        "uid": 2855599,
        "ip_address": "",
        "ucode": "6F5FD189D2916C",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/2b\/92\/af\/ad02ae4b.jpg",
        "comment_is_top": false,
        "comment_ctime": 1638436144,
        "is_pvip": false,
        "replies": [
          {
            "id": "117976",
            "content": "👍",
            "user_name": "作者回复",
            "user_name_real": "编辑",
            "uid": "1026224",
            "ctime": 1638829862,
            "ip_address": "",
            "comment_id": 324443,
            "utype": 1
          }
        ],
        "discussion_count": 3,
        "race_medal": 0,
        "score": "27408239920",
        "product_id": 100093501,
        "comment_content": "func checkYear() error {<br>\terr := errors.New(&quot;wrong year&quot;)<br><br>\t&#47;&#47; 短变量形式，屏蔽了外层的包级变量 a，代替 其接收值<br>\t&#47;&#47; err代替上面 的 err接收值<br>\t<br>\t&#47;&#47; 接收放在 switch 作用域外 <br>\ta, err := getYear()<br><br>\tswitch a {<br>\tcase 2020:<br>\t\tfmt.Println(&quot;哦哦哦it is&quot;, a, err)<br>\tcase 2021:<br>\t\tfmt.Println(&quot;it is&quot;, a)<br>\t\terr = nil<br>\t}<br>\tfmt.Println(&quot;after check, it is&quot;, a)<br>\treturn err<br>}",
        "like_count": 6
      },
      {
        "had_liked": false,
        "id": 321245,
        "user_name": "文经",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1072346,
        "ip_address": "",
        "ucode": "2C059BD2A4276B",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/10\/5c\/da\/0a8bc27b.jpg",
        "comment_is_top": false,
        "comment_ctime": 1636724269,
        "is_pvip": true,
        "replies": [
          {
            "id": "116792",
            "content": "也算是一个办法。前提是明确规则，且大家都遵守。这样才能在协作中，减少遮蔽问题的发生频度。",
            "user_name": "作者回复",
            "user_name_real": "Tony Bai",
            "uid": "1026224",
            "ctime": 1636966243,
            "ip_address": "",
            "comment_id": 321245,
            "utype": 1
          }
        ],
        "discussion_count": 1,
        "race_medal": 0,
        "score": "18816593453",
        "product_id": 100093501,
        "comment_content": "约定号包级别的变量用长的名字，越是局部的变量用越短小的名字，应该能够解决一大部分变量zhe遮蔽的问题。",
        "like_count": 5
      },
      {
        "had_liked": false,
        "id": 320074,
        "user_name": "Amosヾ",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1567014,
        "ip_address": "",
        "ucode": "833F6FCB4042AD",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/17\/e9\/26\/afc08398.jpg",
        "comment_is_top": false,
        "comment_ctime": 1636076212,
        "is_pvip": true,
        "replies": [
          {
            "id": "116244",
            "content": "不重名肯定不会遮蔽。但是实际编码中，一些常用的功能变量，比如表示错误的err、表示下标的i，表示key和value的k、v等，如果要做不同命名，很容易在代码中出现大量的k1,v1,k2,v2等，阅读起来总是感觉缺少了一些优雅感。不知你是否有同感。",
            "user_name": "作者回复",
            "user_name_real": "Tony Bai",
            "uid": "1026224",
            "ctime": 1636422100,
            "ip_address": "",
            "comment_id": 320074,
            "utype": 1
          }
        ],
        "discussion_count": 3,
        "race_medal": 0,
        "score": "18815945396",
        "product_id": 100093501,
        "comment_content": "可不可以通过变量尽量不重名来避免变量遮蔽呢？",
        "like_count": 4
      },
      {
        "had_liked": false,
        "id": 320292,
        "user_name": "程旭阳",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1027691,
        "ip_address": "",
        "ucode": "54BEAD957CEF21",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/0f\/ae\/6b\/b72b0d90.jpg",
        "comment_is_top": false,
        "comment_ctime": 1636204353,
        "is_pvip": true,
        "replies": [
          {
            "id": "116269",
            "content": "正确✅",
            "user_name": "作者回复",
            "user_name_real": "Tony Bai",
            "uid": "1026224",
            "ctime": 1636426577,
            "ip_address": "",
            "comment_id": 320292,
            "utype": 1
          }
        ],
        "discussion_count": 3,
        "race_medal": 0,
        "score": "14521106241",
        "product_id": 100093501,
        "comment_content": "go1.17.1 `type new int`会报错： <br>cannot assign new to a (type int) in multiple assignment<br>cannot use new value as type int in assignment<br>修改为 `type new = int` 之后不再报错<br><br>思考题解决方法：<br>package main<br><br>import (<br>    &quot;fmt&quot;<br>    &quot;errors&quot;<br>)<br><br>var a int = 2020<br><br>func checkYear() error {<br><br>    err := errors.New(&quot;wrong year&quot;)<br><br>    switch a, err = getYear(); a {<br>    case 2020:<br>        fmt.Println(&quot;it is&quot;, a, err)<br>    case 2021:<br>        fmt.Println(&quot;it is&quot;, a)<br>        err = nil<br>    }<br>    fmt.Println(&quot;after check, it is&quot;, a)<br>    return err<br>}<br><br>type year = int<br><br>func getYear() (year, error) {<br>    var b int16 = 2021<br>    return year(b), nil<br>}<br><br>func main() {<br>    err := checkYear()<br>    if err != nil {<br>        fmt.Println(&quot;call checkYear error:&quot;, err)<br>        return<br>    }<br>    fmt.Println(&quot;call checkYear ok&quot;)<br>}",
        "like_count": 3
      },
      {
        "had_liked": false,
        "id": 320190,
        "user_name": "罗杰",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1320487,
        "ip_address": "",
        "ucode": "96BAFAA147341F",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/14\/26\/27\/eba94899.jpg",
        "comment_is_top": false,
        "comment_ctime": 1636113323,
        "is_pvip": false,
        "discussion_count": 0,
        "race_medal": 2,
        "score": "10226047915",
        "product_id": 100093501,
        "comment_content": "这节课适应在电脑上阅读，而且要用心看",
        "like_count": 2
      },
      {
        "had_liked": false,
        "id": 330851,
        "user_name": "独钓寒江",
        "can_delete": false,
        "product_type": "c1",
        "uid": 2812836,
        "ip_address": "",
        "ucode": "53C15891B7E800",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/2a\/eb\/a4\/b247e9b7.jpg",
        "comment_is_top": false,
        "comment_ctime": 1642223902,
        "is_pvip": false,
        "replies": [
          {
            "id": "121587",
            "content": "一旦“禁止用预定义标识符定义新类型或者变量的行为”，那么new这样的预定义标识符就和关键字没啥区别了。",
            "user_name": "作者回复",
            "user_name_real": "编辑",
            "uid": "1026224",
            "ctime": 1643521917,
            "ip_address": "",
            "comment_id": 330851,
            "utype": 1
          }
        ],
        "discussion_count": 1,
        "race_medal": 0,
        "score": "5937191198",
        "product_id": 100093501,
        "comment_content": "“位于第 18 行的 new，这本是 Go 语言的一个预定义标识符，但上面示例代码呢，却用 new 这个名字定义了一个新类型，于是 new 这个标识符就被遮蔽了”<br>为什么不禁止用预定义标识符定义新类型或者变量的行为呢？",
        "like_count": 1
      },
      {
        "had_liked": false,
        "id": 320556,
        "user_name": "进化菌",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1276861,
        "ip_address": "",
        "ucode": "B30A5F78BB4171",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/13\/7b\/bd\/ccb37425.jpg",
        "comment_is_top": false,
        "comment_ctime": 1636377931,
        "is_pvip": true,
        "discussion_count": 0,
        "race_medal": 4,
        "score": "5931345227",
        "product_id": 100093501,
        "comment_content": "这么来看的话，代码还是不要嵌套太深的好，同文件中的变量命名也尽量不重名，大概率能减少变量遮蔽的问题。",
        "like_count": 1
      },
      {
        "had_liked": false,
        "id": 320268,
        "user_name": "Rayjun",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1002514,
        "ip_address": "",
        "ucode": "61A3D1A3D03569",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/0f\/4c\/12\/f0c145d4.jpg",
        "comment_is_top": false,
        "comment_ctime": 1636188969,
        "is_pvip": true,
        "replies": [
          {
            "id": "116271",
            "content": "有一点提醒一下：既然我们知道了new是预定义的标识符，我们在日常编写代码中尽量要避免重新定义new.",
            "user_name": "作者回复",
            "user_name_real": "Tony Bai",
            "uid": "1026224",
            "ctime": 1636426850,
            "ip_address": "",
            "comment_id": 320268,
            "utype": 1
          }
        ],
        "discussion_count": 1,
        "race_medal": 0,
        "score": "5931156265",
        "product_id": 100093501,
        "comment_content": "修改两个地方，把 a 的类型改成 new，并 去掉 switch 那的一个引号<br><br>var a new = 2020 <br><br>func checkYear() error { <br>\terr := errors.New(&quot;wrong year&quot;) <br>\tswitch a, err = getYear(); a { <br>\tcase 2020: <br>\t\tfmt.Println(&quot;it is&quot;, a, err) <br>\tcase 2021: <br>\t\tfmt.Println(&quot;it is&quot;, a) <br>\t\terr = nil <br>\t} <br>\tfmt.Println(&quot;after check, it is&quot;, a) <br>\treturn err <br>} <br><br>type new int <br><br>func getYear() (new, error) { <br>\tvar b int16 = 2021 <br>\treturn new(b), nil <br>} <br><br>func main() { <br>\terr := checkYear() <br>\tif err != nil { <br>\t\tfmt.Println(&quot;call checkYear error:&quot;, err) <br>\t\treturn <br>\t} <br>\tfmt.Println(&quot;call checkYear ok&quot;) <br>}",
        "like_count": 1
      },
      {
        "had_liked": false,
        "id": 320196,
        "user_name": "aoe",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1121758,
        "ip_address": "",
        "ucode": "1C6201EDB4E954",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/11\/1d\/de\/62bfa83f.jpg",
        "comment_is_top": false,
        "comment_ctime": 1636115610,
        "is_pvip": false,
        "discussion_count": 0,
        "race_medal": 0,
        "score": "5931082906",
        "product_id": 100093501,
        "comment_content": "不使用一样的名字就行啊",
        "like_count": 1
      },
      {
        "had_liked": false,
        "id": 350079,
        "user_name": "He",
        "can_delete": false,
        "product_type": "c1",
        "uid": 2175841,
        "ip_address": "",
        "ucode": "7F5FF5BEE48AF1",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/21\/33\/61\/16505a1a.jpg",
        "comment_is_top": false,
        "comment_ctime": 1656557957,
        "is_pvip": false,
        "discussion_count": 0,
        "race_medal": 0,
        "score": "1656557957",
        "product_id": 100093501,
        "comment_content": "package main<br><br>import (<br>\t&quot;errors&quot;<br>\t&quot;fmt&quot;<br>)<br>var a int = 2020<br><br>func checkYear() error {<br>\terr := errors.New(&quot;wrong year&quot;)<br>\tvar a new\t&#47;&#47;\t声明 a<br>\tswitch a, err = getYear(); a {\t&#47;&#47; 不创建新变量，使用赋值操作<br>\tcase 2020:<br>\t\tfmt.Println(&quot;it is&quot;, a, err)<br>\tcase 2021:<br>\t\tfmt.Println(&quot;it is&quot;, a)<br>\t\terr = nil<br>\t}<br>\tfmt.Println(&quot;after check, it is&quot;, a)<br>\treturn err<br>}<br><br>type new int<br><br>func getYear() (new, error) {<br>\tvar b int16 = 2021<br>\treturn new(b), nil<br>}<br><br>func main() {<br>\terr := checkYear()<br>\tif err != nil {<br>\t\tfmt.Println(&quot;call checkYear error:&quot;, err)<br>\t\treturn<br>\t}<br>\tfmt.Println(&quot;call checkYear ok&quot;)<br>}",
        "like_count": 0
      },
      {
        "had_liked": false,
        "id": 350077,
        "user_name": "He",
        "can_delete": false,
        "product_type": "c1",
        "uid": 2175841,
        "ip_address": "",
        "ucode": "7F5FF5BEE48AF1",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/21\/33\/61\/16505a1a.jpg",
        "comment_is_top": false,
        "comment_ctime": 1656557879,
        "is_pvip": false,
        "replies": [
          {
            "id": "127393",
            "content": "👍",
            "user_name": "作者回复",
            "user_name_real": "编辑",
            "uid": "1026224",
            "ctime": 1656598472,
            "ip_address": "",
            "comment_id": 350077,
            "utype": 1
          }
        ],
        "discussion_count": 1,
        "race_medal": 0,
        "score": "1656557879",
        "product_id": 100093501,
        "comment_content": "package main<br><br>import (<br>\t&quot;errors&quot;<br>\t&quot;fmt&quot;<br>)<br>var a int = 2020<br><br>func checkYear() error {<br>\terr := errors.New(&quot;wrong year&quot;)<br>\tvar a new<br>\tswitch a, err = getYear(); a {\t&#47;&#47; 重新声明，使用赋值<br>\tcase 2020:<br>\t\tfmt.Println(&quot;it is&quot;, a, err)<br>\tcase 2021:<br>\t\tfmt.Println(&quot;it is&quot;, a)<br>\t\terr = nil<br>\t}<br>\tfmt.Println(&quot;after check, it is&quot;, a)<br>\treturn err<br>}<br><br>type new int<br><br>func getYear() (new, error) {<br>\tvar b int16 = 2021<br>\treturn new(b), nil<br>}<br><br>func main() {<br>\terr := checkYear()<br>\tif err != nil {<br>\t\tfmt.Println(&quot;call checkYear error:&quot;, err)<br>\t\treturn<br>\t}<br>\tfmt.Println(&quot;call checkYear ok&quot;)<br>}",
        "like_count": 0
      },
      {
        "had_liked": false,
        "id": 344388,
        "user_name": "westfall",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1632773,
        "ip_address": "",
        "ucode": "F3F5CB7DF695FC",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/18\/ea\/05\/b164dc15.jpg",
        "comment_is_top": false,
        "comment_ctime": 1651503662,
        "is_pvip": false,
        "replies": [
          {
            "id": "125766",
            "content": "安装后的shadow一般在$GOPATH&#47;bin下，如果没有显式设置GOPATH，则在~&#47;go&#47;bin下。如果该目录没有被加入到PATH环境变量中，which命令是找不到shadow的。",
            "user_name": "作者回复",
            "user_name_real": "编辑",
            "uid": "1026224",
            "ctime": 1651700881,
            "ip_address": "",
            "comment_id": 344388,
            "utype": 1
          }
        ],
        "discussion_count": 2,
        "race_medal": 0,
        "score": "1651503662",
        "product_id": 100093501,
        "comment_content": "奇怪了，mac 上执行 <br>go install golang.org&#47;x&#47;tools&#47;go&#47;analysis&#47;passes&#47;shadow&#47;cmd&#47;shadow@latest <br>安装成功之后，执行 which shadow 总是 shadow not found",
        "like_count": 0
      },
      {
        "had_liked": false,
        "id": 342634,
        "user_name": "时间带走初心",
        "can_delete": false,
        "product_type": "c1",
        "uid": 2640610,
        "ip_address": "",
        "ucode": "EE593130177745",
        "user_header": "https:\/\/thirdwx.qlogo.cn\/mmopen\/vi_32\/Q0j4TwGTfTI2doZU8iaFwEWjyVB095OxmUxGN0ZFJNhicDpAneHEaHWicOa3ClHbZ0rs5gtTIPI1OicxYL68icGmNmg\/132",
        "comment_is_top": false,
        "comment_ctime": 1650375537,
        "is_pvip": true,
        "replies": [
          {
            "id": "125225",
            "content": "这个命令行不适用windows，windows下默认没有which这个命令。你可以在windows下安装一个linux虚拟机或用wsl2安装一个ubuntu来运行上面命令。",
            "user_name": "作者回复",
            "user_name_real": "编辑",
            "uid": "1026224",
            "ctime": 1650493814,
            "ip_address": "",
            "comment_id": 342634,
            "utype": 1
          }
        ],
        "discussion_count": 1,
        "race_medal": 0,
        "score": "1650375537",
        "product_id": 100093501,
        "comment_content": "老师,想请问一下为啥在window下执行go vet -vettool=$(which shadow) -strict complex.go 会出现这样的提示which : 无法将“which”项识别为 cmdlet、函数、脚本文件或可运行程序的名称<br>。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。<br>所在位置 行:1 字符: 19",
        "like_count": 0
      },
      {
        "had_liked": false,
        "id": 339792,
        "user_name": "史努比",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1922171,
        "ip_address": "",
        "ucode": "20D1EC05778BC6",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/1d\/54\/7b\/780c04ff.jpg",
        "comment_is_top": false,
        "comment_ctime": 1648387627,
        "is_pvip": false,
        "replies": [
          {
            "id": "124189",
            "content": "我倒是觉得“宇宙代码块”更形象生动罒ω罒。否则go官方也不会用universe block，而会用global block了。<br><br>另外代码块不要与作用域混淆。包代码块中声明的首字母大写的标识符实际是也是拥有全局作用域的，可以被任意其他代码所引用的。",
            "user_name": "作者回复",
            "user_name_real": "编辑",
            "uid": "1026224",
            "ctime": 1648425359,
            "ip_address": "",
            "comment_id": 339792,
            "utype": 1
          }
        ],
        "discussion_count": 1,
        "race_medal": 0,
        "score": "1648387627",
        "product_id": 100093501,
        "comment_content": "Universe Block是不是翻译成“全局代码块”更贴切一些，“宇宙代码块”总觉得怪怪的。",
        "like_count": 0
      },
      {
        "had_liked": false,
        "id": 338563,
        "user_name": "肖肖",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1034524,
        "ip_address": "",
        "ucode": "6BB1DC60110435",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/0f\/c9\/1c\/596749c8.jpg",
        "comment_is_top": false,
        "comment_ctime": 1647573128,
        "is_pvip": true,
        "replies": [
          {
            "id": "123864",
            "content": "用最新的go 1.18版本在macos下跑了一下，原文中的命令没有问题：<br><br>go vet -vettool=$(which shadow) -strict complex.go<br># command-line-arguments<br>.&#47;complex.go:13:12: declaration of &quot;err&quot; shadows declaration at line 11<br><br>不加-strict也是可以的：<br><br>$go vet -vettool=$(which shadow)  complex.go <br># command-line-arguments<br>.&#47;complex.go:13:12: declaration of &quot;err&quot; shadows declaration at line 11<br><br>",
            "user_name": "作者回复",
            "user_name_real": "编辑",
            "uid": "1026224",
            "ctime": 1647824964,
            "ip_address": "",
            "comment_id": 338563,
            "utype": 1
          }
        ],
        "discussion_count": 1,
        "race_medal": 0,
        "score": "1647573128",
        "product_id": 100093501,
        "comment_content": "这个问题有人碰到过吗，该怎么解决呢。 <br>不加-strict 就是好的，但不会报变量遮蔽提示；而加了 -strict 就会报错<br>go vet -vettool=$(which shaow) -strict test.go <br>flag provided but not defined: -strict",
        "like_count": 0
      },
      {
        "had_liked": false,
        "id": 338169,
        "user_name": "William Ning",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1592279,
        "ip_address": "",
        "ucode": "4DB8D05E69E5F3",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/18\/4b\/d7\/f46c6dfd.jpg",
        "comment_is_top": false,
        "comment_ctime": 1647334119,
        "is_pvip": true,
        "replies": [
          {
            "id": "123641",
            "content": "要问就是语言设计需要:)。",
            "user_name": "作者回复",
            "user_name_real": "编辑",
            "uid": "1026224",
            "ctime": 1647401041,
            "ip_address": "",
            "comment_id": 338169,
            "utype": 1
          }
        ],
        "discussion_count": 1,
        "race_medal": 0,
        "score": "1647334119",
        "product_id": 100093501,
        "comment_content": "外层评论一下：<br><br>又看了一遍，果然看一遍是记不住的，平时主要写PHP代码，因为只支持函数作用域，所以，不会出现上面的问题，而且使用重名的变量好处之一，减少内存占用。<br>所以，老师，同学，我想问，划分这么细的作用域的目的是什么呢？",
        "like_count": 0
      },
      {
        "had_liked": false,
        "id": 336909,
        "user_name": "Kepler",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1214303,
        "ip_address": "",
        "ucode": "0C9CA3DB8B3CF0",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/12\/87\/5f\/6bf8b74a.jpg",
        "comment_is_top": false,
        "comment_ctime": 1646463198,
        "is_pvip": true,
        "replies": [
          {
            "id": "123236",
            "content": "可以按你的方式修改并run一下，如果没判断错的话，会报编译错误。再想想💪。",
            "user_name": "作者回复",
            "user_name_real": "编辑",
            "uid": "1026224",
            "ctime": 1646722560,
            "ip_address": "",
            "comment_id": 336909,
            "utype": 1
          }
        ],
        "discussion_count": 3,
        "race_medal": 0,
        "score": "1646463198",
        "product_id": 100093501,
        "comment_content": "去掉第7行的:",
        "like_count": 0
      },
      {
        "had_liked": false,
        "id": 336437,
        "user_name": "Rayjun",
        "can_delete": false,
        "product_type": "c1",
        "uid": 1002514,
        "ip_address": "",
        "ucode": "61A3D1A3D03569",
        "user_header": "https:\/\/static001.geekbang.org\/account\/avatar\/00\/0f\/4c\/12\/f0c145d4.jpg",
        "comment_is_top": false,
        "comment_ctime": 1646146202,
        "is_pvip": true,
        "replies": [
          {
            "id": "123108",
            "content": "好问题！不过这是编程语言设计范畴的问题，我不是编程语言设计专家，不能从原理上给予解释。但从目前情况来看，似乎没有哪门编程语言禁止不同作用域的同名变量声明，显然这是一个语言设计与实现的惯例。",
            "user_name": "作者回复",
            "user_name_real": "编辑",
            "uid": "1026224",
            "ctime": 1646472373,
            "ip_address": "",
            "comment_id": 336437,
            "utype": 1
          }
        ],
        "discussion_count": 1,
        "race_medal": 0,
        "score": "1646146202",
        "product_id": 100093501,
        "comment_content": "老师，这里我还有一个问题，我发现如果是在同级的作用域中，声明两个一样的变量就会报错，但是在不同级的作用域中就不会，那么 go 语言为何不禁止同名变量的声明，这样不就可以解决变量遮蔽的问题么",
        "like_count": 0
      }
    ],
    "page": {
      "count": 30,
      "more": true
    }
  },
  "code": 0
}