spring.shardingsphere.datasource.names=shard01,shard02
## 分库01 
spring.shardingsphere.datasource.shard01.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.shard01.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.shard01.url=jdbc:mysql://localhost:3306/shard0
spring.shardingsphere.datasource.shard01.username=root
spring.shardingsphere.datasource.shard01.password=root
## 分库02 
spring.shardingsphere.datasource.shard02.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.shard02.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.shard02.url=jdbc:mysql://localhost:3306/shard1
spring.shardingsphere.datasource.shard02.username=root
spring.shardingsphere.datasource.shard02.password=root
## 分库的分片策略
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=shard$->{user_id % 2}
## 所谓广播表（BroadCastTable），是指所有分片数据源中都存在的表，也就是说，这种表的表结构和表中的数据在每个数据库中都是完全一样的。
# spring.shardingsphere.sharding.broadcast-tables=health_level
## 引入绑定表概念的根本原因在于，互为绑定表关系的多表关联查询不会出现笛卡尔积，因此关联查询效率将大大提升。
# spring.shardingsphere.sharding.binding-tables=health_record, health_task
## 表的分片策略
spring.shardingsphere.sharding.tables.health_record.actual-data-nodes=ds$->{0..1}.health_record
spring.shardingsphere.sharding.tables.health_record.key-generator.column=id
spring.shardingsphere.sharding.tables.health_record.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.health_record.key-generator.props.worker.id=33

mybatis.mapper-locations=classpath:mapper/*.xml